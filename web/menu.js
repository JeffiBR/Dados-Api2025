// menu.js - Sistema de menu din√¢mico baseado em permiss√µes (COMPAT√çVEL COM auth.js)

document.addEventListener('DOMContentLoaded', async function() {
    // Aguarda a inicializa√ß√£o do auth se necess√°rio
    if (!window.isInitialized) {
        await new Promise(resolve => setTimeout(resolve, 100));
    }
    await initializeDynamicMenu();
});

async function initializeDynamicMenu() {
    try {
        console.log('üìã Inicializando menu din√¢mico...');

        // Verifica autentica√ß√£o usando a fun√ß√£o do auth.js
        const isAuthenticated = await checkAuth();
        if (!isAuthenticated) {
            console.log('‚ùå Usu√°rio n√£o autenticado - ocultando menu');
            const sidebar = document.getElementById('sidebarMenu');
            if (sidebar) sidebar.style.display = 'none';
            return;
        }

        // Obt√©m o perfil do usu√°rio usando a fun√ß√£o do auth.js
        const userProfile = await fetchUserProfile();
        if (!userProfile) {
            console.error('‚ùå Perfil do usu√°rio n√£o encontrado');
            return;
        }

        console.log('‚úÖ Usu√°rio autenticado, aplicando filtros de menu:', {
            role: userProfile.role,
            managed_groups: userProfile.managed_groups,
            allowed_pages: userProfile.allowed_pages
        });

        // Oculta o menu inicialmente durante o processamento
        const sidebar = document.getElementById('sidebarMenu');
        if (sidebar) {
            sidebar.style.display = 'none';
        }

        // Filtra e mostra apenas os itens permitidos
        await filterMenuItems(userProfile);

        // Mostra o menu ap√≥s aplicar os filtros
        if (sidebar) {
            sidebar.style.display = 'block';
        }

        console.log('‚úÖ Menu din√¢mico inicializado com sucesso');

    } catch (error) {
        console.error('‚ùå Erro ao inicializar menu:', error);

        // Em caso de erro de autentica√ß√£o, oculta o menu
        const sidebar = document.getElementById('sidebarMenu');
        if (sidebar) sidebar.style.display = 'none';
    }
}

async function filterMenuItems(userProfile) {
    const menuItems = document.querySelectorAll('[data-required-permission]');

    console.log(`üîç Filtrando ${menuItems.length} itens de menu...`);

    for (const item of menuItems) {
        const requiredPermission = item.getAttribute('data-required-permission');

        // Usa a fun√ß√£o hasPageAccess do auth.js para verificar permiss√£o
        const hasAccess = await hasPageAccess(requiredPermission);

        if (!hasAccess) {
            item.style.display = 'none';
            console.log(`‚ûñ Ocultando item: ${requiredPermission}`);
        } else {
            item.style.display = 'block';
            console.log(`‚ûï Mostrando item: ${requiredPermission}`);

            // Adiciona log de acesso quando o usu√°rio clica no item do menu
            const link = item.querySelector('a');
            if (link) {
                link.addEventListener('click', async function(e) {
                    try {
                        await authenticatedFetch('/api/log-page-access', {
                            method: 'POST',
                            body: JSON.stringify({ 
                                page_key: requiredPermission,
                                timestamp: new Date().toISOString()
                            })
                        });
                        console.log(`üìù Log de acesso registrado para: ${requiredPermission}`);
                    } catch (error) {
                        console.error('‚ùå Erro ao registrar acesso:', error);
                    }
                });
            }
        }
    }

    // Esconde se√ß√µes vazias
    hideEmptySections();

    // Adiciona tratamento especial para admin/subadmin
    await handleAdminMenuItems(userProfile);
}

function hideEmptySections() {
    const sections = document.querySelectorAll('.nav-section');

    sections.forEach(section => {
        const visibleItems = section.querySelectorAll('li[data-required-permission]');
        let hasVisibleItems = false;

        visibleItems.forEach(item => {
            if (item.style.display !== 'none') {
                hasVisibleItems = true;
            }
        });

        // Se n√£o h√° itens vis√≠veis, esconde a se√ß√£o inteira
        if (!hasVisibleItems) {
            section.style.display = 'none';
            console.log(`‚ûñ Ocultando se√ß√£o vazia: ${section.querySelector('h3')?.textContent || 'Sem t√≠tulo'}`);
        } else {
            section.style.display = 'block';
        }
    });
}

async function handleAdminMenuItems(userProfile) {
    // Tratamento especial para itens de administra√ß√£o
    const adminItems = document.querySelectorAll('[data-required-permission="admin"], [data-required-permission="group_admin"]');

    for (const item of adminItems) {
        const requiredPermission = item.getAttribute('data-required-permission');
        let shouldShow = false;

        if (requiredPermission === 'admin') {
            shouldShow = userProfile.role === 'admin';
        } else if (requiredPermission === 'group_admin') {
            shouldShow = userProfile.role === 'admin' || 
                        (userProfile.managed_groups && userProfile.managed_groups.length > 0);
        }

        if (shouldShow) {
            item.style.display = 'block';
            console.log(`üëë Mostrando item administrativo: ${requiredPermission}`);
        } else {
            item.style.display = 'none';
        }
    }
}

// Sistema de atualiza√ß√£o do menu quando o estado de autentica√ß√£o muda
function setupMenuAuthListener() {
    console.log('üîß Configurando listener de autentica√ß√£o para menu...');

    // Inscreve para mudan√ßas no estado de autentica√ß√£o
    subscribeToAuthStateChange(async () => {
        console.log('üîÑ Atualizando menu devido a mudan√ßa de estado de autentica√ß√£o');
        await initializeDynamicMenu();
    });
}

// Fun√ß√£o para for√ßar atualiza√ß√£o do menu
async function refreshMenu() {
    console.log('üîÑ For√ßando atualiza√ß√£o do menu...');
    await initializeDynamicMenu();
}

// Inicializa√ß√£o quando o DOM estiver pronto
document.addEventListener('DOMContentLoaded', function() {
    console.log('üìÑ DOM carregado - configurando menu...');

    // Configura o listener de autentica√ß√£o
    setTimeout(() => {
        setupMenuAuthListener();
    }, 1000);
});

// Torna as fun√ß√µes globais para acesso externo
window.initializeDynamicMenu = initializeDynamicMenu;
window.refreshMenu = refreshMenu;
window.filterMenuItems = filterMenuItems;
window.setupMenuAuthListener = setupMenuAuthListener;

console.log('‚úÖ menu.js carregado - Compat√≠vel com auth.js');